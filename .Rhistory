install.packages("leaflet")
library(jsonlite)
library(httr)
library(tidyverse)
# API Key is stored in .Renviron
apikey <- Sys.getenv("COVID_ACT_NOW_API_KEY")
# Retrieve aggregated US data
us_data_json <- GET(paste0("https://api.covidactnow.org/v2/country/US.timeseries.json?apiKey=", apikey))
us_data <- fromJSON(content(us_data_json, as = "text"))
# Retrieve Maryland state-level COVID data
md_data_json <- GET(paste0("https://api.covidactnow.org/v2/state/MD.timeseries.json?apiKey=", apikey))
md_data <- fromJSON(content(md_data_json, as = "text"))
# Retrieve Baltimore City COVID data
balt_data_json <- GET(paste0("https://api.covidactnow.org/v2/county/24510.timeseries.json?apiKey=", apikey))
balt_data <- fromJSON(content(balt_data_json, as = "text"))
View(balt_data_json)
View(balt_data)
str(balt_data)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.fullwidth = TRUE,
fig.width = 8,
fig.height = 5
)
# Shiny
library(flexdashboard)
library(shiny)
library(leaflet)
# Data wrangling
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.fullwidth = TRUE,
fig.width = 8,
fig.height = 5
)
data_dict <- read_csv("data_dict.csv")
kable(data_dict, format = "html")
# Shiny
library(flexdashboard)
library(shiny)
library(leaflet)
# Data wrangling
library(tidyverse)
# Others
library(knitr)
data_dict <- read_csv("data_dict.csv")
kable(data_dict, format = "html")
data_dict <- read_csv("data_dict.csv", delimiter=";")
?read_csv
data_dict <- read_csv("data_dict.csv", delim=";")
data_dict <- read_delim("data_dict.csv", delim=";")
kable(data_dict, format = "html")
View(data_dict)
data_dict <- read_delim("data_dict.csv", delim=";")
kable(data_dict, format = "html",
col.names = c("Variable", "Label", "Description"))
library(kableExtra)
library(jsonlite)
library(httr)
# API Key is stored in .Renviron
apikey <- Sys.getenv("COVID_ACT_NOW_API_KEY")
# Retrieve Baltimore City COVID data
balt_data_json <- GET(paste0("https://api.covidactnow.org/v2/county/24510.timeseries.json?apiKey=", apikey))
balt_data <- fromJSON(content(balt_data_json, as = "text"))
# Retrieve relevant variables
shiny_data <-
data.frame(date = as.Date(balt_data$metricsTimeseries$date),
cases = balt_data$actualsTimeseries$cases,
caseDensity = balt_data$metricsTimeseries$caseDensity,
testPositivityRatio = balt_data$metricsTimeseries$testPositivityRatio,
weeklyCovidAdmissionsPer100k = balt_data$metricsTimeseries$weeklyCovidAdmissionsPer100k,
vaccinationsCompletedRatio = balt_data$metricsTimeseries$vaccinationsCompletedRatio,
deaths = balt_data$actualsTimeseries$deaths)
# Test if a directory named data exists locally (will create if it doesn't exist)
ifelse(!dir.exists("data"), dir.create("data"),
"Directory is already created")
# Read the data only once
shiny_data_path <- "data/shiny_data.Rdata"
if (!file.exists(shiny_data_path)) {
save(shiny_data, file = shiny_data_path)
} else {
load(shiny_data_path)
}
View(shiny_data)
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(row_number == 1L) |>
select(date, cases)
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(row_number == 1L) |>
dplyr::select(date, cases)
# Chunk 1: libaries
# Shiny
library(flexdashboard)
library(shiny)
library(leaflet)
# Data wrangling
library(tidyverse)
# Others
library(knitr)
library(kableExtra)
# Chunk 2: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.fullwidth = TRUE,
fig.width = 8,
fig.height = 5
)
# Chunk 3: data_dict
data_dict <- read_delim("data_dict.csv", delim=";")
kable(data_dict, format = "html",
col.names = c("Variable", "Label", "Description")) |>
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 4: datatable1
DT::renderDataTable({
DT::datatable(shiny_data,
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: Left;',
htmltools::withTags(
div(HTML('<a href="https://covidactnow.org/data-api">Click here for instructions to download the data.</a>')))),
options = list(autoWidth = TRUE,
pageLength = 20,
scroller = TRUE,
scrollY = '600px'))
})
# Chunk 5: data
library(jsonlite)
library(httr)
# API Key is stored in .Renviron
apikey <- Sys.getenv("COVID_ACT_NOW_API_KEY")
# Retrieve Baltimore City COVID data
balt_data_json <- GET(paste0("https://api.covidactnow.org/v2/county/24510.timeseries.json?apiKey=", apikey))
balt_data <- fromJSON(content(balt_data_json, as = "text"))
# Retrieve relevant variables
shiny_data <-
data.frame(date = as.Date(balt_data$metricsTimeseries$date),
cases = balt_data$actualsTimeseries$cases,
caseDensity = balt_data$metricsTimeseries$caseDensity,
testPositivityRatio = balt_data$metricsTimeseries$testPositivityRatio,
weeklyCovidAdmissionsPer100k = balt_data$metricsTimeseries$weeklyCovidAdmissionsPer100k,
vaccinationsCompletedRatio = balt_data$metricsTimeseries$vaccinationsCompletedRatio,
deaths = balt_data$actualsTimeseries$deaths)
# Test if a directory named data exists locally (will create if it doesn't exist)
ifelse(!dir.exists("data"), dir.create("data"),
"Directory is already created")
# Read the data only once
shiny_data_path <- "data/shiny_data.Rdata"
if (!file.exists(shiny_data_path)) {
save(shiny_data, file = shiny_data_path)
} else {
load(shiny_data_path)
}
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(row_number == 1L) |>
dplyr::select(date, cases)
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(date, cases)
total_cases
totalcases
totalcases[2]
totalcases[1]
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(date, cases) |>
dplyr::pull()
valueBox(value = paste0(totalcases[2], " as of ", totalcases[1]),
color = "white")
paste0(totalcases[2], " as of ", totalcases[1]
)
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(date, cases) |>
as.vector()
valueBox(value = paste0(totalcases[2], " as of ", totalcases[1]),
color = "white")
totalcases
as.vector(totalcases)
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(cases) |>
as.numeric |> formatC(., big.mark = ",")
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(cases) |>
as.numeric |> formatC(big.mark = ",")
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(cases) |>
as.numeric() |> formatC(big.mark = ",")
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(cases) |>
as.numeric() |> formatC(digits = 3, big.mark = ",")
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(cases) |>
as.numeric()
totalcases <- shiny_data |>
dplyr::filter(!is.na(cases)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(cases) |>
as.numeric() |> formatC(format = "d", big.mark = ",")
casedensity <- shiny_data |>
dplyr::filter(!is.na(caseDensity)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(cases) |>
as.numeric()
valueBox(value = casedensity,
color = "white")
casedensity <- shiny_data |>
dplyr::filter(!is.na(caseDensity)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(caseDensity) |>
as.numeric()
valueBox(value = casedensity,
color = "white")
testpos <- shiny_data |>
dplyr::filter(!is.na(testPositivityRatio)) |>
dplyr::arrange(desc(date)) |>
dplyr::filter(dplyr::row_number() == 1L) |>
dplyr::select(testPositivityRatio) |>
as.numeric()
valueBox(value = testpos,
color = "white")
